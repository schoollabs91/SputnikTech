package com.lab.kot.school.model.eo;

import java.math.BigDecimal;

import oracle.jbo.AttributeList;
import oracle.jbo.Key;
import oracle.jbo.domain.Number;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.SequenceImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Mon Oct 31 17:54:22 IST 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class SCommonLookupEOImpl extends EntityImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        LovId,
        LovFieldName,
        LovFieldValue,
        LovShortName,
        LovActiveYn,
        LovLongName;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }

    public static final int LOVID = AttributesEnum.LovId.index();
    public static final int LOVFIELDNAME = AttributesEnum.LovFieldName.index();
    public static final int LOVFIELDVALUE = AttributesEnum.LovFieldValue.index();
    public static final int LOVSHORTNAME = AttributesEnum.LovShortName.index();
    public static final int LOVACTIVEYN = AttributesEnum.LovActiveYn.index();
    public static final int LOVLONGNAME = AttributesEnum.LovLongName.index();

    /**
     * This is the default constructor (do not remove).
     */
    public SCommonLookupEOImpl() {
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("com.lab.kot.school.model.eo.SCommonLookupEO");
    }

    /**
     * Gets the attribute value for LovId, using the alias name LovId.
     * @return the value of LovId
     */
    public Long getLovId() {
        return (Long) getAttributeInternal(LOVID);
    }

    /**
     * Sets <code>value</code> as the attribute value for LovId.
     * @param value value to set the LovId
     */
    public void setLovId(Long value) {
        setAttributeInternal(LOVID, value);
    }

    /**
     * Gets the attribute value for LovFieldName, using the alias name LovFieldName.
     * @return the value of LovFieldName
     */
    public String getLovFieldName() {
        return (String) getAttributeInternal(LOVFIELDNAME);
    }

    /**
     * Sets <code>value</code> as the attribute value for LovFieldName.
     * @param value value to set the LovFieldName
     */
    public void setLovFieldName(String value) {
        setAttributeInternal(LOVFIELDNAME, value);
    }

    /**
     * Gets the attribute value for LovFieldValue, using the alias name LovFieldValue.
     * @return the value of LovFieldValue
     */
    public String getLovFieldValue() {
        return (String) getAttributeInternal(LOVFIELDVALUE);
    }

    /**
     * Sets <code>value</code> as the attribute value for LovFieldValue.
     * @param value value to set the LovFieldValue
     */
    public void setLovFieldValue(String value) {
        setAttributeInternal(LOVFIELDVALUE, value);
    }

    /**
     * Gets the attribute value for LovShortName, using the alias name LovShortName.
     * @return the value of LovShortName
     */
    public String getLovShortName() {
        return (String) getAttributeInternal(LOVSHORTNAME);
    }

    /**
     * Sets <code>value</code> as the attribute value for LovShortName.
     * @param value value to set the LovShortName
     */
    public void setLovShortName(String value) {
        setAttributeInternal(LOVSHORTNAME, value);
    }

    /**
     * Gets the attribute value for LovActiveYn, using the alias name LovActiveYn.
     * @return the value of LovActiveYn
     */
    public String getLovActiveYn() {
        return (String) getAttributeInternal(LOVACTIVEYN);
    }

    /**
     * Sets <code>value</code> as the attribute value for LovActiveYn.
     * @param value value to set the LovActiveYn
     */
    public void setLovActiveYn(String value) {
        setAttributeInternal(LOVACTIVEYN, value);
    }

    /**
     * Gets the attribute value for LovLongName, using the alias name LovLongName.
     * @return the value of LovLongName
     */
    public String getLovLongName() {
        return (String) getAttributeInternal(LOVLONGNAME);
    }

    /**
     * Sets <code>value</code> as the attribute value for LovLongName.
     * @param value value to set the LovLongName
     */
    public void setLovLongName(String value) {
        setAttributeInternal(LOVLONGNAME, value);
    }


    /**
     * @param lovId key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(Long lovId) {
        return new Key(new Object[] { lovId });
    }

    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */
    protected void create(AttributeList attributeList) {        
        super.create(attributeList);
        SequenceImpl tranSeq = new SequenceImpl("LIST_ID", this.getDBTransaction());        
        Number tNumber = tranSeq.getSequenceNumber();
        this.setLovId(tNumber.longValue());
    }
}

